
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.dynatrace.synthetic;

import com.dynatrace.diagnostics.pdk.*;
import com.dynatrace.synthetic.data.process.TestResultSummary;
import com.dynatrace.synthetic.process.Authenticate;
import com.dynatrace.synthetic.process.ProcessTestData;
import com.dynatrace.synthetic.process.Tests;
import com.dynatrace.synthetic.rest.RestManager;
import com.mashape.unirest.http.exceptions.UnirestException;


import java.util.Collection;
import java.util.HashMap;
import java.util.logging.Logger;


public class monitor implements Monitor {

	private static final Logger log = Logger.getLogger(monitor.class.getName());
	
	// measure constants
	private static final String METRIC_GROUP           = "Script Metrics";
	private static final String MSR_RESPONSE_TIME      = "responseTime";
	private static final String MSR_AVAILABILITY       = "availability";
	private static final String MSR_SUCCESSFUL_STEPS   = "successfulSteps";
	private static final String MSR_FAILED_STEPS       = "failedSteps";
	private static final String MSR_SUCCESSFUL_OBJECTS = "successfulObjects";
	private static final String MSR_FAILED_OBJECTS     = "failedObjects";
	private static final String MSR_NUMBER_OF_BYTES    = "averageNumberOfBytes";
	private static final String MSR_TEST_EXECUTION     = "testExecutions";
	private static final String DYNAMIC_MEASURE_NAME   = "Location";

	private String userName;
	private String password;
	private String scriptName;
	private String scriptType;
	private boolean proxyAuth;
	private boolean proxyOn;
	private String proxyHost;
	private String proxyPort;
	private String proxyUser;
	private String proxyPass;
	
	private Collection<MonitorMeasure> monitorMeasures;
	private MonitorMeasure dynamicMeasure;
	
	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		userName = env.getConfigString("userName");
		password = env.getConfigPassword("password");
		scriptName = env.getConfigString("testName");
		scriptType = env.getConfigString("testType");
		proxyHost = env.getConfigString("proxyHost");
		proxyPort = env.getConfigString("proxyPort");
		proxyUser = env.getConfigString("proxyUser");
		proxyPass = env.getConfigPassword("proxyPass");
		proxyAuth = env.getConfigBoolean("proxyAuth");
		proxyOn = env.getConfigBoolean("proxyOn");
		
		if(isNotNull(userName))   return new Status(Status.StatusCode.ErrorInternalConfigurationProblem, "A valid Dynatrace Synthetic user is required");
		if(isNotNull(password))   return new Status(Status.StatusCode.ErrorInternalConfigurationProblem, "A valid Dynatrace Synthetic password is required");
		if(isNotNull(scriptName)) return new Status(Status.StatusCode.ErrorInternalConfigurationProblem, "A valid Dynatrace Synthetic script is required");
		
		
		return new Status(Status.StatusCode.Success);
	}
	
	private boolean isNotNull(String string){
		return (string != null && !string.isEmpty()) ? false : true;
	}

	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		log.fine("Starting the execute method");
		try {
		Authenticate token = new Authenticate(userName, password, proxyUser, proxyPass, proxyHost, proxyPort, proxyAuth, proxyOn);		
		log.fine("Successfully autheticated!  Using token: " + token.getAccessToken());
		String monitorId = new Tests(token.getAccessToken()).getMonitorId(scriptName, scriptType);
		log.fine("Found a matching script with an ID of " + monitorId);
	    ProcessTestData testData = new ProcessTestData(scriptName, token.getAccessToken(), monitorId);
	    HashMap<String, TestResultSummary> testResults = testData.getTestData();
	    
	    for (String key : testResults.keySet()){
	    	TestResultSummary testResultSummary = testResults.get(key);
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_RESPONSE_TIME);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getAverageResponseTime());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_AVAILABILITY);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getAvailability());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_SUCCESSFUL_STEPS);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getNumberOfSuccessfulSteps());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_FAILED_STEPS);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getNumberOfFailedSteps());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_SUCCESSFUL_OBJECTS);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getNumberOfSuccessfulObjects());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_FAILED_OBJECTS);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getNumberOfFailedObjects());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_TEST_EXECUTION);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getNumberOfTestExecutions());
	    	}
	    	
	    	monitorMeasures = env.getMonitorMeasures(METRIC_GROUP, MSR_NUMBER_OF_BYTES);
	    	for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures){
	    		dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, DYNAMIC_MEASURE_NAME, key);
	    		dynamicMeasure.setValue(testResultSummary.getAverageNumberOfBytes());
	    	}
	    	
	    }
	    
	    log.fine("Finished the execute method");
	    return new Status(Status.StatusCode.Success);
	   
		}    catch (UnirestException e) {
	    	log.severe(e.toString());
	    	return new Status(Status.StatusCode.ErrorInternalException);
	    }
		
		}
		

	 @Override
	public void teardown(MonitorEnvironment env) throws Exception {
		 RestManager.shutdownRest();
	}
}
